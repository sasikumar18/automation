exit
      expect(page.title.count).to eq 6
      expect(page.tittle.count).to eq 6
      expect(page.total_count).to eq '6'
      expect(page.display_count).to eq '6'
      page.clear_filter
      expect(page.title).to eq(['Full Frontal with Samantha Bee'])
page.title
load '/home/banupriya/basic_automation/page/brand_list.rb'
page.title
load '/home/banupriya/basic_automation/page/brand_list.rb'
page.title.flatten
page.title
load '/home/banupriya/basic_automation/page/brand_list.rb'
page.title
page.filter_by('Full Frontal with Samantha Bee')
expect(page.title.count).to eq 6
page.title.count
 expect(page.total_count).to eq '6'
page.total_count
 expect(page.display_count).to eq '6'
page.display_count
exit
      page.clear_filter
page.display_count
  expect(page.display_count).to eq '6'
  page.filter_by('Full Frontal with Samantha Bee')
c
   page.filter_by('Full Frontal with Samantha Bee')
c
    expect(page.filter_by).to eq(['Full Frontal with Samantha Bee'])
  page.filter_by('Full Frontal with Samantha Bee')
  expect(page.title.count).to eq 6
  expect(page.total_count).to eq '6'
    expect(page.display_count).to eq '6'
c
page.brand?('Full Frontal with Samantha Bee')
load '/home/banupriya/basic_automation/page/brand_list.rb'
page.brand?('Full Frontal with Samantha Bee')
load '/home/banupriya/basic_automation/page/brand_list.rb'
page.brand?('Full Frontal with Samantha Bee')
page.click_item('Brands')
exit
brand_names.any? {|el| el.text.downcase == brand.downcase}
brand_names.any? {|el| el.text.downcase == brand.downcae}
brand_names.map(&:text)
 brand
brand_names.any? {|el| el.text == brand}
c
rows.map{|x| x.brand_verify?(brand)}
c
rows.map{|x| x.brand_verify?(brand)}
rows.methods.sort
brand
brand_verify?(brand)
rows.brand_verify?(brand)
rows
rows.brand_verify?(brand)
c
page.brand?('Full Frontal with Samantha Bee')
load '/home/banupriya/basic_automation/page/brand_list.rb'
page.brand?('Full Frontal with Samantha Bee')
load '/home/banupriya/basic_automation/page/brand_list.rb'
page.brand?('Full Frontal with Samantha Bee')
item.click
item = menu_items.find {|el| el.text == name}
c
item.click
item = menu_items.find {|el| el.text == name}
c
item.click
item
item = menu_items.find {|el| el.text == name}
menu_items.find {|el| el.text == name}
menu_items
c
brand_select.any? {|el| el.text == brand}
brand_select
brand_select = title_names
title_names
c
exit
page.clear_filter
page.display_count
page.filter_by('Full Frontal with Samantha Bee')
page.title.count
c
brand_title
c
title_names.map(&:text)
c
title_names.map(&:text)
c
title_names.map(&:text)
title_names
c
rows.brand_title
c
page.title
c
page.title.count
page.title
page.total_count
page.display_countpage.total_count
page.display_count
c
obj.title_filter_name
(obj.title_filter_name
title_filter_name
c
/home/banupriya/basic_automation/spec/basic/basic_features_spec.rb
obj.title
obj.titlt
 obj.title('Full Frontal with Samantha Bee')
#brandsdatatable_filter input
c
exp_brands.count
c
exp_brands.count
c
title_list.map{|a| a.text.class}
title_list.map{|a| a.text}
title_list.text
c
total_display.gsub(/SHOWING (\d+) OF (\d+) BRANDS/, '\2')
total_display
total_display = header_label.text
c
header_label.text
c
header_label.text
filter.matches_css? {|x| x.text == 6 }
filter.match {|x| x.text == 6 }
filter.matches_css?{|x| x.text == argument}
c
filter.matches_css?{|x| x.text == argument}
filter.matches_css?{|x| x.text == 6}
filter.matches_css?
filter.text
variable
c
variable
c
filter.text
filter.find_all{|x| x.down_case}
filter.find_all{|x| x.down_case
filter.find_all{|x| x.text = '6'}
filter.find_all{|x| x.text = 6}
filter.find_all{|x| x.text = 6
filter.methods.sort
filter.map
filter
c
filter.display
filter.find 
filter.find {|a| a.text == argument}
filter.class
filter.methods.sort
filter.
filter.methods_sort
filter.map
filter.count
filter
z.text
argument
c
filter.any {|z| z.text == argument}
filter.all {|z| z.text == argument}
filter.any? {|z| z.text == argument}
c
exp_brands.any? {|y| y.text == brand}
c
filter.map
filter.all {|z| z.text == argument}
filter.any? {|z| z.text == argument}
filter.any? {|z| z.text == argument.string}
argument
c
filter.all {|z| z.text == argument}
filter.all {|z| z.text == argument.string}
filter.all? {|z| z.text == argument.string}
methods.sort
filter.method.sort
filter.method_sort
filter.class
argument
argumant
filter.any? {|z| z.text == argument.string}
argument
c
exp_brands.any? {|y| y.text == brand}
exp_brands.map
brand
c
filter.any? {|z| z.text == argument}
filter.all? {|z| z.text == argument}
filter.find
filter.map
filter.map {|a|a}
fiter.map
argument
c
argument
c
exp_brands.any? {|y| y.text == brand}
exp_brands
c
brands_table.find {|y| y.text == brand}
brands_table.find {|y| y.text == brand
brands_table.map {|a| a}
brands_table.map
brands_table
brand_table
brand
c
brands_table.find {|y| y.text == brand}
brands_table.all? {|y| y.text == brand}
brand
c
exp_brands.all? {|y| y.text == brand}
exp_brands.all {|y| y.text == brand}
exp_brands.all? {|y| y.text == brand}
exp_brands.any_all? {|y| y.text == brand}
brands_table.any_all? {|y| y.text == brand}
c
brand
c
filter_count.text
c
filter_count.hover
c
div.dataTables_info.hover
brands_table.find {|x| x.text == 'Full Frontal with Samantha Bee'}.click
brands_table.find {|x| x.text == 'Full Frontal with Samantha Bee'}
brands_table.map {|x| x.text == 'Full Frontal with Samantha Bee'}
brands_table.map {|x| x.text}
exit
brands_table.map {|x| x.text}
load '/home/banupriya/basic_automation/page/login_page.rb'
brands_table.map {|x| x.text == 'Full Frontal with Samantha Bee'}
brands_table.find {|x| x.text == 'Full Frontal with Samantha Bee'}
brands_table.map {|x| x.text}
exit
brands_table.map {|x| x.text}
brands_table.map
load '/home/banupriya/basic_automation/page/login_page.rb'
load
brands_table
c
click_item('Full Frontal with Samantha Bee')
c
item.down_case
item
menu_items.count
item.count[A
item = menu_items.find {|x| x.text == 'Brands'}.count
